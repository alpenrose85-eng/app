import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import json

st.set_page_config(page_title="–†–∞—Å—á—ë—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –∑–º–µ–µ–≤–∏–∫–æ–≤", layout="wide")
st.title("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –∑–º–µ–µ–≤–∏–∫–æ–≤ –í–†–ß")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ---
st.sidebar.header("üìÅ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å / –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç (.json)", type=["json"])
project_data = None

if uploaded_file is not None:
    try:
        project_data = json.load(uploaded_file)
        st.sidebar.success("‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!")
    except Exception as e:
        st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

# --- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ---
if project_data is not None:
    test_data = project_data.get("–∏—Å–ø—ã—Ç–∞–Ω–∏—è", [])
    params = project_data.get("–ø–∞—Ä–∞–º–µ—Ç—Ä—ã_—Ç—Ä—É–±—ã", {})
    num_tests = len(test_data)
else:
    num_tests = 6
    test_data = []
    params = {}

st.header("1. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
test_data_input = []
for i in range(num_tests):
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        default_sample = test_data[i]["–û–±—Ä–∞–∑–µ—Ü"] if i < len(test_data) else f"–û–±—Ä.{i+1}"
        sample = col1.text_input(f"–û–±—Ä–∞–∑–µ—Ü {i+1}", value=str(default_sample))
    with col2:
        default_sigma = test_data[i]["sigma_MPa"] if i < len(test_data) else 120.0
        sigma = col2.number_input(f"œÉ, –ú–ü–∞ (–∏—Å–ø. {i+1})", value=float(default_sigma), min_value=0.1, max_value=500.0)
    with col3:
        default_T = test_data[i]["T_C"] if i < len(test_data) else 600.0
        T_C = col3.number_input(f"T, ¬∞C (–∏—Å–ø. {i+1})", value=float(default_T), min_value=100.0, max_value=1000.0)
    with col4:
        default_tau = test_data[i]["tau_h"] if i < len(test_data) else 500.0
        tau_h = col4.number_input(f"œÑ, —á (–∏—Å–ø. {i+1})", value=float(default_tau), min_value=1.0, max_value=1e7)
    test_data_input.append({"–û–±—Ä–∞–∑–µ—Ü": sample, "sigma_MPa": sigma, "T_C": T_C, "tau_h": tau_h})

df_tests = pd.DataFrame(test_data_input)

st.header("2. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä—É–±—ã")
col1, col2 = st.columns(2)
with col1:
    s_nom_val = params.get("s_nom", 6.0)
    s_nom = st.number_input("–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏ s_–Ω, –º–º", value=float(s_nom_val), min_value=0.1, max_value=1000.0)
    
    s_min_val = params.get("s_min", 5.07)
    s_min = st.number_input("–¢–µ–∫—É—â–∞—è min —Ç–æ–ª—â–∏–Ω–∞ s_–º–∏–Ω, –º–º", value=float(s_min_val), min_value=0.1, max_value=s_nom)
    
    s_max_val = params.get("s_max", 5.95)
    s_max = st.number_input("–¢–µ–∫—É—â–∞—è max —Ç–æ–ª—â–∏–Ω–∞ s_–º–∞–∫—Å, –º–º", value=float(s_max_val), min_value=0.1, max_value=1000.0)
    
    tau_exp_val = params.get("tau_exp", 317259)
    tau_exp = st.number_input("–ù–∞—Ä–∞–±–æ—Ç–∫–∞ œÑ_—ç, —á", value=int(tau_exp_val), min_value=1, max_value=5_000_000)
with col2:
    d_max_val = params.get("d_max", 19.90)
    d_max = st.number_input("–ú–∞–∫—Å. –≤–Ω—É—Ç—Ä. –¥–∏–∞–º–µ—Ç—Ä d_–º–∞–∫—Å, –º–º", value=float(d_max_val), min_value=0.1, max_value=1000.0)
    
    T_rab_C_val = params.get("T_rab_C", 517.0)
    T_rab_C = st.number_input("–†–∞–±–æ—á–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ T_—Ä–∞–±, ¬∞C", value=float(T_rab_C_val), min_value=100.0, max_value=1000.0)
    
    p_MPa_val = params.get("p_MPa", 27.93)
    p_MPa = st.number_input("–î–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞ p, –ú–ü–∞", value=float(p_MPa_val), min_value=0.1, max_value=100.0)
    
    k_zapas_val = params.get("k_zapas", 1.5)
    k_zapas = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞ k_–∑–∞–ø", value=float(k_zapas_val), min_value=1.0, max_value=5.0)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö ---
st.header("3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ (–¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –æ—Ç—á—ë—Ç)")
col1, col2 = st.columns(2)
with col1:
    fig_width_cm = st.slider("–®–∏—Ä–∏–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞ (—Å–º)", min_value=12, max_value=17, value=15, step=1)
    fig_width_in = fig_width_cm / 2.54
with col2:
    fig_height_cm = st.slider("–í—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ (—Å–º)", min_value=8, max_value=12, value=10, step=1)
    fig_height_in = fig_height_cm / 2.54

# --- –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
if st.sidebar.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"):
    data_to_save = {
        "–∏—Å–ø—ã—Ç–∞–Ω–∏—è": test_data_input,
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã_—Ç—Ä—É–±—ã": {
            "s_nom": s_nom,
            "s_min": s_min,
            "s_max": s_max,
            "tau_exp": tau_exp,
            "d_max": d_max,
            "T_rab_C": T_rab_C,
            "p_MPa": p_MPa,
            "k_zapas": k_zapas
        }
    }
    json_str = json.dumps(data_to_save, indent=2, ensure_ascii=False)
    st.sidebar.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (.json)",
        data=json_str,
        file_name="–ø—Ä–æ–µ–∫—Ç_—Ä–µ—Å—É—Ä—Å–∞.json",
        mime="application/json"
    )

# --- –†–∞—Å—á—ë—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ ---
if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–µ—Å—É—Ä—Å"):
    try:
        # --- 1. –†–∞—Å—á—ë—Ç P ---
        df_tests["T_K"] = df_tests["T_C"] + 273.15
        df_tests["P"] = df_tests["T_K"] * (np.log10(df_tests["tau_h"]) - 2 * np.log10(df_tests["T_K"]) + 24.88) * 1e-3

        # --- 2. –ù–∞–∏—Ö—É–¥—à–∏–µ –æ–±—Ä–∞–∑—Ü—ã ---
        df_tests["group"] = df_tests["sigma_MPa"].astype(str) + "_" + df_tests["T_C"].astype(str)
        worst_df = df_tests.loc[df_tests.groupby("group")["tau_h"].idxmin()].copy()

        # --- 3. –ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è log10(œÉ) = a*P + b ---
        X = worst_df["P"].values
        y = np.log10(worst_df["sigma_MPa"].values)
        A = np.vstack([X, np.ones(len(X))]).T
        a, b = np.linalg.lstsq(A, y, rcond=None)[0]
        R2 = 1 - np.sum((y - (a*X + b))**2) / np.sum((y - np.mean(y))**2)
        —É—Ä–∞–≤–Ω–µ–Ω–∏–µ = f"log‚ÇÅ‚ÇÄ(œÉ) = {a:.3f} ¬∑ P + {b:.3f}"

        # --- 4. –°–∫–æ—Ä–æ—Å—Ç—å –∫–æ—Ä—Ä–æ–∑–∏–∏ ---
        if s_max > s_nom:
            v_corr = (s_max - s_min) / tau_exp
        else:
            v_corr = (s_nom - s_min) / tau_exp

        # --- 5. –ò—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç œÑ_–ø—Ä–æ–≥–Ω ---
        T_rab = T_rab_C + 273.15
        tau_prognoz = 50000.0
        converged = False
        for iter_num in range(60):
            s_min2 = s_min - v_corr * tau_prognoz
            if s_min2 <= 0:
                st.error("‚ùå –¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏ —Å—Ç–∞–ª–∞ ‚â§ 0. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                break

            sigma_k2 = (p_MPa / 2) * (d_max / s_min2 + 1)
            sigma_rasch = k_zapas * sigma_k2

            if sigma_rasch < 20 or sigma_rasch > 150:
                st.warning(f"‚ö†Ô∏è –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ ({sigma_rasch:.1f} –ú–ü–∞) –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –º–æ–¥–µ–ª–∏ (20‚Äì150 –ú–ü–∞).")

            P_rab = (np.log10(sigma_rasch) - b) / a
            log_tau_r = P_rab / T_rab * 1000 + 2 * np.log10(T_rab) - 24.88
            tau_r = 10**log_tau_r
            delta = tau_prognoz - tau_r

            if 0 < delta <= 240:
                converged = True
                break

            if delta > 240:
                tau_prognoz *= 0.9
            else:
                tau_prognoz *= 1.1

            if iter_num > 30:
                tau_prognoz += -100 if delta > 240 else 100

        # --- 6. –ì—Ä–∞—Ñ–∏–∫ ---
        sigma_vals = np.linspace(20, 150, 300)
        P_dop = (24956 - 2400 * np.log10(sigma_vals) - 10.9 * sigma_vals) * 1e-3
        P_appr = (np.log10(sigma_vals) - b) / a

        P_min = min(P_dop.min(), df_tests["P"].min(), P_appr.min())
        P_max = max(P_dop.max(), df_tests["P"].max(), P_appr.max())

        plt.figure(figsize=(fig_width_in, fig_height_in))
        plt.plot(P_dop, sigma_vals, 'k-', label='–î–æ–ø—É—Å–∫–∞–µ–º—ã–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è')
        plt.plot(P_appr, sigma_vals, 'r--', label=f'–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è (R¬≤ = {R2:.3f})')
        plt.scatter(df_tests["P"], df_tests["sigma_MPa"], c='b', label='–í—Å–µ —Ç–æ—á–∫–∏')
        plt.scatter(worst_df["P"], worst_df["sigma_MPa"], c='r', edgecolors='k', s=80, label='–ù–∞–∏—Ö—É–¥—à–∏–µ')

        plt.xlim(P_min - 0.2, P_max + 0.2)
        plt.ylim(20, 150)
        plt.xlabel("–ü–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç–∏ P")
        plt.ylabel("–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ œÉ, –ú–ü–∞")
        plt.legend()
        plt.grid(True)

        # --- 7. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")
        if converged:
            st.success(f"‚úÖ **–û—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–µ—Å—É—Ä—Å: {tau_prognoz:,.0f} —á**")
            st.write(f"- –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏: **{—É—Ä–∞–≤–Ω–µ–Ω–∏–µ}**")
            st.write(f"- –†–∞—Å—á—ë—Ç–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Å –∑–∞–ø–∞—Å–æ–º: **{sigma_rasch:.1f} –ú–ü–∞**")
            st.write(f"- –ú–∏–Ω. —Ç–æ–ª—â–∏–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ—Å—É—Ä—Å–∞: **{s_min2:.3f} –º–º**")
            st.write(f"- –í—Ä–µ–º—è –¥–æ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –ø–æ –º–æ–¥–µ–ª–∏: **{tau_r:,.0f} —á**")
            st.write(f"- –†–∞–∑–Ω–∏—Ü–∞ (œÑ_–ø—Ä–æ–≥–Ω - œÑ_—Ä): **{delta:.0f} —á**")
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")

        st.pyplot(plt, use_container_width=False)

    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
